// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package odb

import (
	"context"
	"unique"

	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*inttypes.ServicePackageFrameworkDataSource {
	return []*inttypes.ServicePackageFrameworkDataSource{
		{
			Factory:  newDataSourceCloudAutonomousVmCluster,
			TypeName: "aws_odb_cloud_autonomous_vm_cluster",
			Name:     "Cloud Autonomous Vm Cluster",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newDataSourceCloudExadataInfrastructure,
			TypeName: "aws_odb_cloud_exadata_infrastructure",
			Name:     "Cloud Exadata Infrastructure",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newDataSourceCloudVmCluster,
			TypeName: "aws_odb_cloud_vm_cluster",
			Name:     "Cloud Vm Cluster",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newDataSourceDbServer,
			TypeName: "aws_odb_db_server",
			Name:     "Db Server",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newDataSourceDbServersList,
			TypeName: "aws_odb_db_servers_list",
			Name:     "Db Servers List",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newDataSourceNetwork,
			TypeName: "aws_odb_network",
			Name:     "Network",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newDataSourceNetworkPeeringConnection,
			TypeName: "aws_odb_network_peering_connection",
			Name:     "Network Peering Connection",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*inttypes.ServicePackageFrameworkResource {
	return []*inttypes.ServicePackageFrameworkResource{
		{
			Factory:  newResourceCloudAutonomousVmCluster,
			TypeName: "aws_odb_cloud_autonomous_vm_cluster",
			Name:     "Cloud Autonomous Vm Cluster",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newResourceCloudExadataInfrastructure,
			TypeName: "aws_odb_cloud_exadata_infrastructure",
			Name:     "Cloud Exadata Infrastructure",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newResourceCloudVmCluster,
			TypeName: "aws_odb_cloud_vm_cluster",
			Name:     "Cloud Vm Cluster",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newResourceNetwork,
			TypeName: "aws_odb_network",
			Name:     "Network",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newResourceNetworkPeeringConnection,
			TypeName: "aws_odb_network_peering_connection",
			Name:     "Network Peering Connection",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*inttypes.ServicePackageSDKDataSource {
	return []*inttypes.ServicePackageSDKDataSource{}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*inttypes.ServicePackageSDKResource {
	return []*inttypes.ServicePackageSDKResource{}
}

func (p *servicePackage) ServicePackageName() string {
	return names.ODB
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
